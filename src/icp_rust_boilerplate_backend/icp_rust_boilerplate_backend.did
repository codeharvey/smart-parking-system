type ChangeUserRolePayload = record { role : UserRole; user_id : nat64 };
type IsAuthenticatedPayload = record { password : text; user_id : nat64 };
type Message = variant {
  Error : text;
  InvalidPayload : text;
  NotFound : text;
  Success : text;
};
type ParkingSlotStatus = variant { Available; Occupied };
type ParkingSpot = record {
  id : nat64;
  status : ParkingSlotStatus;
  price_per_hour : float64;
  admin_id : nat64;
  created_at : nat64;
  number_of_spots : nat64;
  location : text;
};
type ParkingSpotPayload = record {
  price_per_hour : float64;
  admin_id : nat64;
  number_of_spots : nat64;
  location : text;
};
type Payment = record {
  id : nat64;
  status : text;
  reservation_id : nat64;
  created_at : nat64;
  amount : float64;
};
type PaymentPayload = record { reservation_id : nat64; amount : float64 };
type Reservation = record {
  id : nat64;
  status : text;
  amount_payable : float64;
  created_at : nat64;
  user_id : nat64;
  duration_hours : nat64;
  spot_id : nat64;
  reserved_at : nat64;
};
type ReservationPayload = record {
  user_id : nat64;
  duration_hours : nat64;
  spot_id : nat64;
};
type Result = variant { Ok : User; Err : Message };
type Result_1 = variant { Ok : ParkingSpot; Err : Message };
type Result_2 = variant { Ok : Payment; Err : Message };
type Result_3 = variant { Ok : Reservation; Err : Message };
type Result_4 = variant { Ok : Message; Err : Message };
type User = record {
  id : nat64;
  username : text;
  balance : float64;
  password : text;
  role : UserRole;
  created_at : nat64;
  email : text;
  first_name : text;
  last_name : text;
  phone_number : text;
};
type UserPayload = record {
  username : text;
  password : text;
  email : text;
  first_name : text;
  last_name : text;
  phone_number : text;
};
type UserRole = variant { User; Admin };
type WithdrawalPayload = record { user_id : nat64; amount : float64 };
service : {
  change_user_role : (ChangeUserRolePayload) -> (Result);
  create_admin : (UserPayload) -> (Result);
  create_parking_spot : (ParkingSpotPayload) -> (Result_1);
  create_payment : (PaymentPayload) -> (Result_2);
  create_reservation : (ReservationPayload) -> (Result_3);
  create_user : (UserPayload) -> (Result);
  deposit_funds : (WithdrawalPayload, IsAuthenticatedPayload) -> (Result_4);
  get_parking_spot_by_id : (nat64) -> (Result_1) query;
  get_reservation_by_id : (nat64) -> (Result_3) query;
  get_user_by_id : (nat64) -> (Result) query;
  update_parking_spot_status : (nat64, ParkingSlotStatus) -> (Result_1);
  update_user : (nat64, UserPayload) -> (Result);
  withdraw_funds : (WithdrawalPayload, IsAuthenticatedPayload) -> (Result_4);
}
